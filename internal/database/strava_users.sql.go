// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: strava_users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createStravaUser = `-- name: CreateStravaUser :one
INSERT INTO STRAVA_USER (id, user_id, strava_id, refresh_token, refresh_token_expires_at,
    created_at,updated_at, username, firstname, lastname, city, state, country, sex,
    premuim, weight)
VALUES (
    gen_random_uuid(),
    $1,$2,$3,$4,NOW(),NOW(),$5,$6,$7,$8,$9,$10,$11,$12,$13 
)
RETURNING  id, user_id, strava_id, refresh_token, refresh_token_expires_at, created_at, updated_at, username, firstname, lastname, city, state, country, sex, premuim, weight
`

type CreateStravaUserParams struct {
	UserID                uuid.UUID      `json:"user_id"`
	StravaID              int64          `json:"strava_id"`
	RefreshToken          string         `json:"refresh_token"`
	RefreshTokenExpiresAt time.Time      `json:"refresh_token_expires_at"`
	Username              string         `json:"username"`
	Firstname             sql.NullString `json:"firstname"`
	Lastname              sql.NullString `json:"lastname"`
	City                  sql.NullString `json:"city"`
	State                 sql.NullString `json:"state"`
	Country               sql.NullString `json:"country"`
	Sex                   sql.NullString `json:"sex"`
	Premuim               sql.NullBool   `json:"premuim"`
	Weight                sql.NullInt32  `json:"weight"`	
}

func (q *Queries) CreateStravaUser(ctx context.Context, arg CreateStravaUserParams) (StravaUser, error) {
	row := q.db.QueryRowContext(ctx, createStravaUser,
		arg.UserID,
		arg.StravaID,
		arg.RefreshToken,
		arg.RefreshTokenExpiresAt,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.City,
		arg.State,
		arg.Country,
		arg.Sex,
		arg.Premuim,
		arg.Weight,
	)
	var i StravaUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StravaID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.City,
		&i.State,
		&i.Country,
		&i.Sex,
		&i.Premuim,
		&i.Weight,
	)
	return i, err
}

const getStravaRefreshToken = `-- name: GetStravaRefreshToken :one
SELECT refresh_token,refresh_token_expires_at FROM STRAVA_USER
WHERE user_id = $1
`

type GetStravaRefreshTokenRow struct {
	RefreshToken          string    `json:"refresh_token"`
	RefreshTokenExpiresAt time.Time `json:"refresh_token_expires_at"`
}

func (q *Queries) GetStravaRefreshToken(ctx context.Context, userID uuid.UUID) (GetStravaRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getStravaRefreshToken, userID)
	var i GetStravaRefreshTokenRow
	err := row.Scan(&i.RefreshToken, &i.RefreshTokenExpiresAt)
	return i, err
}

const updateStravaRefreshToken = `-- name: UpdateStravaRefreshToken :exec
UPDATE STRAVA_USER
SET refresh_token = $2,
    refresh_token_expires_at = $3
Where user_id=$1
`

type UpdateStravaRefreshTokenParams struct {
	UserID                uuid.UUID `json:"user_id"`
	RefreshToken          string    `json:"refresh_token"`
	RefreshTokenExpiresAt time.Time `json:"refresh_token_expires_at"`
}

func (q *Queries) UpdateStravaRefreshToken(ctx context.Context, arg UpdateStravaRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateStravaRefreshToken, arg.UserID, arg.RefreshToken, arg.RefreshTokenExpiresAt)
	return err
}
