// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT users.id, users.username, email, users.created_at, users.updated_at, strava_user.id, user_id, strava_id, refresh_token, refresh_token_expires_at, strava_user.created_at, strava_user.updated_at, strava_user.username, firstname, lastname, city, state, country, sex, premuim, weight FROM users
join STRAVA_USER on users.id = STRAVA_USER.user_id
WHERE users.email = $1
`

type GetUserByEmailRow struct {
	ID                    uuid.UUID      `json:"id"`
	Username              string         `json:"username"`
	Email                 string         `json:"email"`
	CreatedAt             time.Time      `json:"created_at"`
	UpdatedAt             time.Time      `json:"updated_at"`
	ID_2                  uuid.UUID      `json:"id_2"`
	UserID                uuid.UUID      `json:"user_id"`
	StravaID              int64          `json:"strava_id"`
	RefreshToken          string         `json:"refresh_token"`
	RefreshTokenExpiresAt time.Time      `json:"refresh_token_expires_at"`
	CreatedAt_2           time.Time      `json:"created_at_2"`
	UpdatedAt_2           time.Time      `json:"updated_at_2"`
	Username_2            string         `json:"username_2"`
	Firstname             sql.NullString `json:"firstname"`
	Lastname              sql.NullString `json:"lastname"`
	City                  sql.NullString `json:"city"`
	State                 sql.NullString `json:"state"`
	Country               sql.NullString `json:"country"`
	Sex                   sql.NullString `json:"sex"`
	Premuim               sql.NullBool   `json:"premuim"`
	Weight                sql.NullInt32  `json:"weight"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.UserID,
		&i.StravaID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Username_2,
		&i.Firstname,
		&i.Lastname,
		&i.City,
		&i.State,
		&i.Country,
		&i.Sex,
		&i.Premuim,
		&i.Weight,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT users.id, users.username, email, users.created_at, users.updated_at, strava_user.id, user_id, strava_id, refresh_token, refresh_token_expires_at, strava_user.created_at, strava_user.updated_at, strava_user.username, firstname, lastname, city, state, country, sex, premuim, weight FROM users
join STRAVA_USER on users.id = STRAVA_USER.user_id
WHERE users.id = $1
`

type GetUserByIDRow struct {
	ID                    uuid.UUID      `json:"id"`
	Username              string         `json:"username"`
	Email                 string         `json:"email"`
	CreatedAt             time.Time      `json:"created_at"`
	UpdatedAt             time.Time      `json:"updated_at"`
	ID_2                  uuid.UUID      `json:"id_2"`
	UserID                uuid.UUID      `json:"user_id"`
	StravaID              int64          `json:"strava_id"`
	RefreshToken          string         `json:"refresh_token"`
	RefreshTokenExpiresAt time.Time      `json:"refresh_token_expires_at"`
	CreatedAt_2           time.Time      `json:"created_at_2"`
	UpdatedAt_2           time.Time      `json:"updated_at_2"`
	Username_2            string         `json:"username_2"`
	Firstname             sql.NullString `json:"firstname"`
	Lastname              sql.NullString `json:"lastname"`
	City                  sql.NullString `json:"city"`
	State                 sql.NullString `json:"state"`
	Country               sql.NullString `json:"country"`
	Sex                   sql.NullString `json:"sex"`
	Premuim               sql.NullBool   `json:"premuim"`
	Weight                sql.NullInt32  `json:"weight"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.UserID,
		&i.StravaID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Username_2,
		&i.Firstname,
		&i.Lastname,
		&i.City,
		&i.State,
		&i.Country,
		&i.Sex,
		&i.Premuim,
		&i.Weight,
	)
	return i, err
}
